var mathExamples = {
  '': ['', ''],
  'coolpropHigh': ['# Based on',
    '# http://www.coolprop.org/coolprop/HighLevelAPI.html#high-level-api',
    '',
    '# Saturation temperature of Water at 1 atm in K',
    'props(\'T\',\'P\',101325 Pa,\'Q\',0,\'Water\')',
    '',
    '# Saturated vapor enthalpy of Water at 1 atm in J/kg',
    'H_V = props(\'H\',\'P\',101325 Pa,\'Q\',1,\'Water\')',
    '',
    '# Saturated liquid enthalpy of Water at 1 atm in J/kg',
    'H_L = props(\'H\',\'P\',101325 Pa,\'Q\',0,\'Water\')',
    '',
    '# Latent heat of vaporization of Water at 1 atm in J/kg',
    'H_V - H_L',
    '',
    '# Get the density of Water at T = 461.1 K and P = 5.0e6 Pa, imposing the liquid phase',
    'props(\'D\',\'T|liquid\',461.1 K,\'P\',5e6 Pa,\'Water\')',
    '',
    '# Get the density of Water at T = 597.9 K and P = 5.0e6 Pa, imposing the gas phase',
    'props(\'D\',\'T\',597.9 K,\'P|gas\',5e6 Pa,\'Water\')',
    '',
    '# You can call the props function directly using dummy arguments for the other unused parameters:',
    'props("Tcrit","",0,"",0,"Water")',
    '',
    '# It can be useful to know what the phase of a given state point is',
    'phase(\'P\',101325 Pa,\'Q\',0,\'Water\')',
    '',
    '# The phase index (as floating point number) can also be obtained using the PropsSI function. In python you would do:',
    'props(\'Phase\',\'P\',101325 Pa,\'Q\',0,\'Water\')',
    '',
    '# c_p using c_p',
    'props(\'C\',\'P\',101325 Pa,\'T\',300 K,\'Water\')',
    '',
    '# c_p using derivate',
    'props(\'d(Hmass)/d(T)|P\',\'P\',101325 Pa,\'T\',300 K,\'Water\')',
    '',
    '# c_p using second partial derivative',
    'props(\'d(d(Hmass)/d(T)|P)/d(Hmass)|P\',\'P\',101325 Pa,\'T\',300 K,\'Water\')']
  ,
  'coolprop': ["", "props('D','T',597.9 K,'P|gas',5e6 Pa,'Water')", "D = [ ];H=[ ];T=[]", "D[1] = props('D', 'T', 298.15 K, 'P', 100e5 Pa, 'CO2')", "H[1] = props('H', 'T', 298.15 K, 'Q', 1, 'R134a')", "H[2] = HAprops('H','T',298.15 K,'P',101325 Pa,'R',0.5)", "T[2] = HAprops('T','P',101325 Pa,'H',H[2],'R',1.0)", "T[2] = HAprops('T','H',H[2],'R',1.0,'P',101325 Pa)"],
  'objects': ["", "{a: 2 + 1, b: 4}", "{\"a\": 2 + 1, \"b\": 4}", "{a: 2, b: {c: 3, d: 4}}", "", "obj = {prop: 42}", "obj.prop", "obj[\"prop\"]", "id= \"prop\";", "obj[id]", "obj.prop = 43", "obj[\"prop\"]", "", "", "car={mass : 1000 kg, acceleration : 10 m/s^2}", "car.force = car.mass*car.acceleration to N", "car.force to lbf"],
  'matrices': ["", "[1, 2, 3]", "[[1, 2, 3], [4, 5, 6]]", "[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]", "[1, 2, 3; 4, 5, 6]", "zeros(3, 2)", "ones(3) ", "5 * ones(2, 2)", "identity(2)", "1:4", "0:2:10", "", "a = [1, 2; 3, 4]", "b = zeros(2, 2)", "c = 5:9", "b[1, 1:2] = [5, 6]", "b[2, :] = [7, 8]", "d = a * b", "d[2, 1]", "d[2, 1:end]", "c[end - 1 : -1 : 2]"],
  'units': ["", "20 celsius in fahrenheit", "90 km/h to m/s", "number(5 cm, mm)", "0.5kg + 33g", "(12 seconds * 5) in minutes", "sin(45 deg)", "9.81 m/s^2 * 5 s to mi/h"],
  'strings': ["", "\"Hello\"", "a = concat(\"hello\", \" world\")", "size(a)", "a[1:5]", "a[1] = \"H\"", "a[7:12] = \"there!\"", "a", "#String conversion", "number(\"300\")", "string(300)"],
  'basicUsage': ["", "1.2 / (3.3 + 1.7)", "a = 5.08 cm + 2 inch", "a to inch", "sin(90 deg)", "f(x, y) = x ^ y;", "f(2, 3)", "round(e,3)", "atan2(3,-3)", "log(10000,10)", "sqrt(-4)", "derivative(\"x^2 +x\",\"x\")", "pow([-1,2;3,1],2)", "1.2 * (2 + 4.5)", "12.7 cm to inch", "sin(45 deg) ^ 2", "9 / 3 + 2i", "det([-1, 2; 3, 1])", "sqrt(3^2 + 4^2)", "2 inch to cm", "cos(45 deg)", "(2 == 3) == false", "22e-3"],
  'refCycleWithRecuperator': [
    "fluid = 'R404a'",
    "mDot = 281.1 kg/h",
    "",
    "",
    "evap = {T: 7.2 degC, P_drop :7066 Pa, superHeating : 0.1 K};",
    "cond = {T: 35 degC, P_drop: 0 Pa, subCooling : 0.1 K};",
    "etaS = 0.75;",
    "IHX = {epsilon : 0.8, thickness : 1 mm, cellSize : 10 mm, k : 230 W/(m K)};",
    "",
    "T = [];P = [];D = [];H = [];S = [];",
    "",
    "P_low = props('P','T',evap.T,'Q',1,fluid)",
    "P[1] = P_low;",
    "T[1] = evap.T+ evap.superHeating;",
    "D[1] = props('D','T',T[1],'P',P[1],fluid);",
    "H[1] = props('H','T',T[1],'P',P[1],fluid);",
    "S[1] = props('S','T',T[1],'P',P[1],fluid);",
    "",
    "P[2] = P[1];",
    "T[4] = cond.T-cond.subCooling;",
    "H_eta = props('H','T',T[4],'P',P[2],fluid);",
    "H[2] = IHX.epsilon*(H_eta-H[1])+H[1];",
    "",
    "T[2] = props('T','P',P[2],'H',H[2],fluid);",
    "D[2] = props('D','P',P[2],'H',H[2],fluid);",
    "S[2] = props('S','P',P[2],'H',H[2],fluid);",
    "",
    "p_High = props('P','T',cond.T, 'Q',0,fluid)",
    "",
    "P[3] = p_High;",
    "H_i = props('H','P',P[3],'S',S[2],fluid);",
    "H[3] = (H_i-H[2])/etaS + H[2];",
    "",
    "T[3] = props('T','P',P[3],'H',H[3],fluid);",
    "D[3] = props('D','P',P[3],'H',H[3],fluid);",
    "S[3] = props('S','P',P[3],'H',H[3],fluid);",
    "",
    "P[4] = P[3]-cond.P_drop;",
    "D[4] = props('D','P',P[4],'T',T[4],fluid);",
    "H[4] = props('H','P',P[4],'T',T[4],fluid);",
    "S[4] = props('S','P',P[4],'T',T[4],fluid);",
    "",
    "H[5] = H[1]-H[2]+H[4];",
    "P[5] = P[4];",
    "",
    "T[5] = props('T','P',P[5],'H',H[5],fluid);",
    "D[5] = props('D','P',P[5],'H',H[5],fluid);",
    "S[5] = props('S','P',P[5],'H',H[5],fluid);",
    "",
    "H[6] = H[5];",
    "P[6] = P[1]-evap.P_drop;",
    "",
    "T[6] = props('T','P',P[6],'H',H[6],fluid);",
    "D[6] = props('D','P',P[6],'H',H[6],fluid);",
    "S[6] = props('S','P',P[6],'H',H[6],fluid);",
    "\"\"",
    "\"Compressor\"",
    "W_comp = mDot*(H[3]-H[2])",
    "Q_h = mDot*(H[4]-H[3])",
    "Q_IHX = mDot*(H[2]-H[1])",
    "Q_c = mDot*(H[1]-H[6])",
    "",
    "IHX.T = [T[1],T[2],T[3],T[4]];",
    "",
    "deltaA = IHX.T[3]-IHX.T[2];",
    "deltaB = IHX.T[4]-IHX.T[1];",
    "",
    "IHX.LMTD = (deltaA-deltaB)/log(deltaA/deltaB)",
    "IHX.U = IHX.k/IHX.thickness;",
    "IHX.A = Q_IHX/(IHX.U*IHX.LMTD)",
    "IHX.cellVol = IHX.cellSize^3;",
    "cellSizeToAreaFactor = 3.8424;",
    "IHX.cellArea = cellSizeToAreaFactor*IHX.cellSize^2;",
    "IHX.Volume = IHX.A*IHX.cellVol/IHX.cellArea to mm^3",
    "",
    "evap_COP = Q_c/W_comp",
    "cond_COP = Q_h/W_comp",
    "",
    "H_i_w = props('H', 'P', P[3], 'S', S[1], fluid);",
    "H_w = (H_i_w-H[1])/etaS + H[1];",
    "qNoIHX = H[1]-H[4];",
    "wNoIHX = H_w-H[1];",
    "noIHX_COP = qNoIHX/wNoIHX",
    "evap_COP/noIHX_COP"
  ],
  'VaporCompressionCycle': [
    "# Vapor compression cycle",
    "fluid = 'R134a'",
    "mDot = 1 kg/minute",
    "",
    "evap = {T: -20 degC, P_drop :0 Pa, superHeating : 10 K};",
    "cond = {T: 40 degC, P_drop: 0 Pa, subCooling : 10 K};",
    "etaS = 0.75;",
    "",
    "T = [];P = [];D = [];H = [];S = [];",
    "",
    "P_low = props('P','T',evap.T,'Q',1,fluid);",
    "# Step 1 Between evaporator and compressor",
    "P[1] = P_low;",
    "T[1] = evap.T+ evap.superHeating;",
    "D[1] = props('D','T',T[1],'P',P[1],fluid);",
    "H[1] = props('H','T',T[1],'P',P[1],fluid);",
    "S[1] = props('S','T',T[1],'P',P[1],fluid);",
    "p_High = props('P','T',cond.T, 'Q',0,fluid);",
    "# Step 2 Between compressor and condenser",
    "P[2] = p_High;",
    "H_i = props('H','P',P[2],'S',S[1],fluid);",
    "H[2] = (H_i-H[1])/etaS + H[1];",
    "T[2] = props('T','P',P[2],'H',H[2],fluid);",
    "D[2] = props('D','P',P[2],'H',H[2],fluid);",
    "S[2] = props('S','P',P[2],'H',H[2],fluid);",
    "# Step 3 Between condenser and expansion",
    "P[3] = P[2]-cond.P_drop;",
    "T[3] = cond.T-cond.subCooling;",
    "D[3] = props('D','P',P[3],'T',T[3],fluid);",
    "H[3] = props('H','P',P[3],'T',T[3],fluid);",
    "S[3] = props('S','P',P[3],'T',T[3],fluid);",
    "# Step 4 Between expansion and evaporation",
    "H[4] = H[3];",
    "P[4] = P[1]-evap.P_drop;",
    "T[4] = props('T','P',P[4],'H',H[4],fluid);",
    "D[4] = props('D','P',P[4],'H',H[4],fluid);",
    "S[4] = props('S','P',P[4],'H',H[4],fluid);",
    "",
    "\"\\nCompressor's work:\"",
    "W_comp = mDot*(H[2]-H[1])",
    "\"\\nCondenser heat out:\"",
    "Q_h = mDot*(H[2]-H[3])",
    "\"\\nEvaporator heat in:\"",
    "Q_c = mDot*(H[1]-H[4])",
    "",
    "\"\\nCOP(cooling):\"",
    "evap_COP = Q_c/W_comp",
    "\"\\nCOP(heating):\"",
    "cond_COP = Q_h/W_comp"
  ]
}

// to fill new samples
// go to console
// editor.getValue().split('\n')
// copy paste and edit into an array of lines

function insertExampleFunc(ID) {
  const mathExampleCode = mathExamples[ID].join('\n');
  editor.insert(mathExampleCode)
}
